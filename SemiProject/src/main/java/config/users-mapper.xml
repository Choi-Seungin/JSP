<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.UsersMapper">

	<resultMap type="dto.UsersDTO" id="users">
		<id column="user_number" property="userNumber" />
		<result column="login_ID" property="loginId" />
		<result column="nick_name" property="nickName" />
		<result column="create_time" property="createTime" />
		<result column="update_time" property="updateTime" />
		<result column="pw_update_time" property="pwUpdateTime" />
		<result column="user_name" property="userName" />
		<result column="user_email" property="userEmail" />
	</resultMap>
	
	
    <!-- 모든 사용자 정보 조회 -->
    <select id="selectAllUsers" resultType="dto.UsersDTO">
        SELECT 
            user_number AS userNumber,
            login_id AS loginId,
            nick_name AS nickName,
            password,
            create_time AS createTime,
            update_time AS updateTime,
            pw_update_time AS pwUpdateTime,
            user_name AS userName,
            user_email AS userEmail
        FROM 
            users
    </select>

    <!-- 사용자 번호로 사용자 정보 조회 -->
    <select id="selectUserByUserNumber" parameterType="int" resultType="dto.UsersDTO">
        SELECT 
            user_number AS userNumber,
            login_id AS loginId,
            nick_name AS nickName,
            password,
            create_time AS createTime,
            update_time AS updateTime,
            pw_update_time AS pwUpdateTime,
            user_name AS userName,
            user_email AS userEmail
        FROM 
            users
        WHERE 
            user_number = #{userNumber}
    </select>

    <!-- 로그인 ID로 사용자 정보 조회 -->
    <select id="selectUserByLoginId" parameterType="string" resultType="dto.UsersDTO">
        SELECT 
            user_number AS userNumber,
            login_id AS loginId,
            nick_name AS nickName,
            password,
            create_time AS createTime,
            update_time AS updateTime,
            pw_update_time AS pwUpdateTime,
            user_name AS userName,
            user_email AS userEmail
        FROM 
            users
        WHERE 
            login_id = #{loginId}
    </select>

    <!-- 회원 정보 삽입 -->
    <insert id="insertMember" parameterType="dto.UsersDTO">
        INSERT INTO users (
            user_number,
            login_id,
            nick_name,
            password,
            create_time,
            update_time,
            pw_update_time,
            user_name,
            user_email
        ) VALUES (
            USERS_SEQ.NEXTVAL,
            #{loginId, jdbcType=VARCHAR},
            #{nickName, jdbcType=VARCHAR},
            #{password, jdbcType=VARCHAR}, <!-- 해싱된 비밀번호 -->
            #{createTime, jdbcType=TIMESTAMP},
            #{createTime, jdbcType=TIMESTAMP}, <!-- update_time 설정 -->
            #{pwUpdateTime, jdbcType=TIMESTAMP},
            #{userName, jdbcType=VARCHAR},
            #{userEmail, jdbcType=VARCHAR}
        )
    </insert>


    <!-- 사용자 정보 업데이트 -->
    <update id="updateUser" parameterType="dto.UsersDTO">
        UPDATE users
        SET 
            nick_name = #{nickName},
            user_email = #{userEmail},
            update_time = CURRENT_TIMESTAMP
        WHERE 
            user_number = #{userNumber}
    </update>

     <!-- 사용자 비밀번호 업데이트 -->
    <update id="updatePassword" parameterType="map">
        UPDATE users
        SET 
            password = #{newPassword, jdbcType=VARCHAR},
            pw_update_time = CURRENT_TIMESTAMP
        WHERE 
            user_number = #{userNumber}
    </update>

    <!-- 사용자 삭제 -->
    <delete id="deleteUserByUserNumber" parameterType="int">
        DELETE FROM users
        WHERE 
            user_number = #{userNumber}
    </delete>
    
    <!-- 로그인 ID 중복 확인 -->
    <select id="selectLoginIdCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM users
        WHERE login_id = #{loginId}
    </select>
	
	<!-- 특정 loginId와 password로 사용자 정보 조회 -->
    <select id="selectUserByLoginIdAndPassword" parameterType="map" resultMap="users">
        SELECT *
        FROM users 
        WHERE login_id = #{loginId} AND password = #{password}
    </select>
    
    <!-- 이메일 중복 확인 쿼리 -->
    <select id="selectEmailCount" resultType="int" parameterType="string">
        SELECT COUNT(*) 
        FROM users 
        WHERE user_email = #{email}
    </select>
    <select id="selectNickNameCount" resultType="int" parameterType="string">
   		SELECT COUNT(*) 
   		FROM users 
   		WHERE nick_name = #{nickName}
	</select>


</mapper>